import express from "express"
import webpack from "webpack"
import path from 'path'
import webpackDevMiddleware from 'webpack-dev-middleware'
import React from 'react'
import { renderToString } from 'react-dom/server'
import { ChunkExtractor } from '@loadable/server'
import clientConfig from "./webpack-dev.client"
import serverConfig from "./webpack-dev.server"
import {getHTML} from "./serverHTML.js"
import ServerApp from '../src/App/ServerApp'
const port = 4000


export function initServerSetup() {
const app = express()

const serverCompiler = webpack([clientConfig, serverConfig]);

const instance = webpackDevMiddleware(serverCompiler,{
  logLevel:'silent',
  writeToDisk: (filePath) => {
    return true
  }
})

instance.waitUntilValid(() => {
 
// This is the stats file generated by webpack loadable plugin
const statsFile = path.resolve(
  process.cwd(),
  './dist/node/loadable-stats.json'
)
// We create an extractor from the statsFile
const nodeExtractor = new ChunkExtractor({ statsFile:statsFile })

// This is the stats file generated by webpack loadable plugin
const webstatsFile = path.resolve(
  process.cwd(),
  './dist/client/loadable-stats.json'
)
// We create an extractor from the statsFile
const webextractor = new ChunkExtractor({ statsFile:webstatsFile  })

const { default: App } = nodeExtractor.requireEntrypoint()

// Wrap your application using "collectChunks"
const jsx = webextractor.collectChunks(<App />)

console.log('----> jsx', jsx)

// Render your application
const html = renderToString(jsx)

// const linkTags = extractor.getLinkTags()

// You can now collect your script tags
// const scriptTags = extractor.getScriptTags() // or extractor.getScriptElements();

app.use("/", function routeHandler(req, res){  
  res.send(getHTML({html}))
});

app.listen(port, function listenHandler() {
  console.info(`Running on ${port}...`)
});
console.log('Package is in a valid state');
});
}